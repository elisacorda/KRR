% Using a Disjunctive Datalog System to solve the same queries of SQL - exercises

% Structure of the predicates contained in the knowledge base in tables.dl file 
% drinker(Name, Address, Phone).
% beer(Name, Manufacturer).
% bar(Name, Address, License).
% likes(Drinker, Beer).
% sells(Bar, Beer, Price).
% person(Name, Address, Phone).
% parent(Parent, Child).

% All the lines are commented out because dlv cannot run handle more than one queries at a time
% To check answers using dlv: copy and paste the following test on a .txt file, remove "%" from the query you want to check, from the terminal go to the dir containing dlv and run it using "./dlv -nofacts table.dl exercises.txt"
% This is how you can check my answers

%1-2  List all bars with address 456 Oak Ave.
%answer(Name) :- bar(Name, "456 Oak Ave", Licence).

%1-3 List all bars that sell Corona OR Bud.
% Remove both "%" to check this answer
%answer(Bar) :- sells(Bar, "Corona", Price).
%answer(Bar) :- sells(Bar, "Bud", Price).

%1-4. List all bars with a name starting with “The”.
%tutor no solution

%1-5. List all bars that sell beer cheaper than 5
%answer(Bar) :- sells(Bar, _, Price), Price < 500.

%1-6. List all bars that sell Guinness, and their address.
%answer(Name, Address) :- sells(Name, "Guinness", _), bar(Name, Address, _).

%1-7. List all drinkers that like Bud, and their address.
%answer(Name, Address) :- drinker(Name, Address, _), likes(Name, "Bud").

%1-8. List all bars, the beers they sell, and the manufacturers of the beers.
%answer(Name, Beer, Manuf) :- sells(Name, Beer, _), beer(Beer, Manuf).

%1-9. List all drinkers, their addresses, and the beers they like.
%answer(Name, Address, Beer) :- drinker(Name, Address, _), likes(Name, Beer).

%1-10. List all bars that sell Corona, their address, and the price.
%answer(Name, Address, Price) :- bar(Name, Address, _), sells(Name, "Corona", Price).

%1-11. List all drinkers that live on 123 Main St and that like Bud.
%answer(Name) :- drinker(Name, "123 Main St", _), likes(Name, "Bud").

%1-12. List all pairs of drinkers who live at the same address.
%answer(Name1, Name2) :- drinker(Name1, Address, _), drinker(Name2, Address, _), Name1 < Name2.

%1-13 List all bars that sell Corona AND Bud.
%answer(Name) :- sells(Name, "Corona", _), sells(Name, "Bud", _).

%1-14 Create the table DrinkersBackup(name, addr) and fill it with the same data from Drinkers.
%DrinkersBackup(Name, Address) :- drinker(Name, Address, _).

%1-16. List all drinkers and bars with the same address.
%answer(Drinker, Bar) :- drinker(Drinker, Address, _), bar(Bar, Address, _).

%1-17. List all pairs (drinker, bar) such that
% - the drinker and the bar have the same address (exactly like in the previous query), and 
% - the bar sells beers that the drinker likes.
%answer(Drinker, Bar) :- drinker(Drinker, Address, _), bar(Bar, Address, _), likes(Drinker, Beer), sells(Bar, Beer, _).

%1-18. Same as the previous query, but insert the results in the Frequents table.
%Frequents(Drinker, Bar) :- drinker(Drinker, Address, _), bar(Bar, Address, _), likes(Drinker, Beer), sells(Bar, Beer, _).


%2-1. List each pair of parent and child living at the same address.
%answer(Parent, Child) :- parent(Parent, Child), person(Parent, Address, _), person(Child, Address, _).

%2-2. List each pair of grandparent and child.
%answer(Grandparent, Child) :- parent(Parent, Child), parent(Grandparent, Parent).

%2-3. List each pair of grandparent and child living at the same address.
%answer(Grandparent, Child) :- parent(Grandparent, Parent), parent(Parent, Child), person(Grandparent, Address, _), person(Child, Address, _).

%2-4/5. For each pair (p, s) such that p is an ancestor3 of s, insert the pair (p, s) in Ancestors.
Ancestors(Predecessor, Successor) :- parent(Predecessor, Successor).
Ancestors(Predecessor, Successor) :- parent(Predecessor, X), Ancestor(X, Successor).


